{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["convertToMinutes","timeInString","sec","parseInt","hours","Math","floor","minutes","seconds","colors","App","useState","users","setUsers","conversation","setConversation","handleUserName","e","userTag","target","name","newUser","value","className","type","onChange","json","JSON","parse","results","reduce","acc","item","channelTag","style","minHeight","whiteSpace","length","Object","keys","map","user","placeholder","onClick","el","range","document","createRange","selectNodeContents","sel","window","getSelection","removeAllRanges","addRange","console","log","selectContents","getElementById","id","message","resultEndTime","alternatives","text","transcript","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.24891761.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport \"tachyons/css/tachyons.min.css\";\n\n/**\n * 1046.800\n */\nfunction convertToMinutes(timeInString) {\n  const sec = parseInt(timeInString, 10); // convert value to number if it's string\n  let hours = Math.floor(sec / 3600); // get hours\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (parseInt(hours) === 0) {\n    return minutes + \":\" + seconds; // Return is HH : MM : SS\n  }\n  return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}\n\nfunction selectContents(el: any) {\n  let range = document.createRange();\n  range.selectNodeContents(el);\n  let sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n  console.log(\"aaa\");\n}\n\nconst colors = [\"dark-blue\", \"dark-red\", \"dark-green\", \"dark-orange\"];\n\nfunction App() {\n  const [users, setUsers] = useState({});\n  const [conversation, setConversation] = useState();\n\n  const handleJson = (e) => {\n    const json = JSON.parse(e.target.value);\n    const users = json.results.reduce((acc, item) => {\n      return { [item.channelTag]: null, ...acc };\n    }, {});\n\n    setUsers(users);\n    setConversation(json);\n  };\n\n  const handleUserName = (e) => {\n    const userTag = e.target.name;\n    const newUser = { ...users };\n    newUser[userTag] = e.target.value;\n\n    setUsers(newUser);\n  };\n\n  return (\n    <div className=\"App pa4 sans-serif mid-gray\">\n      <h2 className=\"mt0 f3 dark-blue mb2\">\n        üëÄ Google-speech-to-text Visualizer\n      </h2>\n      <div className=\"flex\">\n        <div className=\"w-40\">\n          <label className=\"dib mb2 fw5\">Json transcript</label>\n          <textarea\n            type=\"textarea\"\n            name=\"textValue\"\n            onChange={handleJson}\n            className=\"dib w-100 b--dark-blue br2\"\n            style={{ minHeight: 600, whiteSpace: \"pre-wrap\" }}\n          />\n        </div>\n\n        <div className=\"ml4 w-60\">\n          {conversation && conversation.results.length > 0 ? (\n            <div className=\"flex mt4 justify-between\">\n              <div className=\"flex\">\n                {Object.keys(users).map((user) => {\n                  return (\n                    <div>\n                      <label>üë§ n¬∞{user}</label>\n                      <input\n                        type=\"text\"\n                        name={user}\n                        onChange={handleUserName}\n                        className={`mh2 pa2 br2 b--${colors[user - 1]}`}\n                        placeholder=\"Name\"\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n              <button\n                onClick={() => {\n                  selectContents(document.getElementById(\"transformed-text\"));\n                }}\n                className=\"bg-dark-blue white br2 ba pa2 f5 ph3 fw5\"\n              >\n                Select all the text\n              </button>\n            </div>\n          ) : (\n            <div className=\"pt4\">\n              ‚¨ÖÔ∏è Paste the content from a json transcipt to the left to get a\n              version easily readable and reusable.\n              <div className=\"pv3 fw2\">\n                üïµÔ∏è This code runs in your browser and do not share your\n                transcript to anyone.\n              </div>\n            </div>\n          )}\n\n          <div id=\"transformed-text\" className=\"mt3\">\n            {conversation &&\n              conversation.results.map((message) => {\n                return (\n                  <div className=\"pb1 flex\">\n                    <span className=\"code f7 black-40\">\n                      {convertToMinutes(message.resultEndTime)}{\" \"}\n                      <span className=\"f5 fw4 sans-serif dark-gray\">\n                        <span\n                          className={`fw6 ${colors[message.channelTag - 1]}`}\n                        >\n                          {users[message.channelTag]}:{\" \"}\n                        </span>\n                        {message.alternatives.map((text) => text.transcript)}\n                      </span>\n                    </span>\n                  </div>\n                );\n              })}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}