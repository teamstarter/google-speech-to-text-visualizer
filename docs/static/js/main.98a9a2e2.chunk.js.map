{"version":3,"sources":["convertToMinutes.js","components/textOnly.js","components/timelines.js","App.js","reportWebVitals.js","index.js"],"names":["convertToMinutes","timeInString","sec","parseInt","hours","Math","floor","minutes","seconds","TextOnly","conversation","colors","users","className","results","map","message","text","alternatives","transcript","join","length","firstWordTime","words","startTime","channelTag","toMs","time","includes","replace","Timeline","user","globalHeight","resultEndTime","style","width","Object","keys","height","filter","calculatedHeight","top","minHeight","boxShadow","borderRadius","fontSize","Timelines","getUsers","json","reduce","acc","item","App","useState","window","localStorage","getItem","lastConversation","setLastConversation","lastConversationJson","JSON","parse","setConversation","setUsers","tab","setTab","handleUserName","e","userTag","target","name","newUser","value","minWidth","type","onChange","setItem","stringify","whiteSpace","placeholder","onClick","removeItem","el","range","document","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectContents","getElementById","id","maxWidth","borderBottomColor","href","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.98a9a2e2.chunk.js","sourcesContent":["/**\n * String format : \"1046.800\"\n */\nexport default function convertToMinutes(timeInString) {\n  const sec = parseInt(timeInString, 10); // convert value to number if it's string\n  let hours = Math.floor(sec / 3600); // get hours\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (parseInt(hours) === 0) {\n    return minutes + \":\" + seconds; // Return is HH : MM : SS\n  }\n  return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}\n","import React from \"react\";\nimport convertToMinutes from \"../convertToMinutes\";\n\nexport default function TextOnly({ conversation, colors, users }) {\n  return (\n    <div className=\"w-100\">\n      {conversation &&\n        conversation.results.map((message) => {\n          const text = message.alternatives.map((text) => text.transcript);\n\n          if (!text.join(\"\").length) {\n            return;\n          }\n\n          const firstWordTime = message.alternatives[0].words[0].startTime;\n\n          return (\n            <div className=\"pb1 flex\">\n              <span className=\"code f7 black-40\">\n                {convertToMinutes(firstWordTime)}{\" \"}\n                <span className=\"f5 fw4 sans-serif dark-gray\">\n                  <span className={`fw6 ${colors[message.channelTag - 1]}`}>\n                    {users[message.channelTag]}:{\" \"}\n                  </span>\n                  {text.join(\" \")}\n                </span>\n              </span>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport convertToMinutes from \"../convertToMinutes\";\n\nconst timeDilatation = 100;\n\nfunction toMs(time) {\n  if (!time.includes(\".\")) {\n    return (parseInt(time.replace(\"s\", \"\"), 10) * 1000) / timeDilatation;\n  }\n  return parseInt(time.replace(\".\", \"\").replace(\"s\", \"\"), 10) / timeDilatation;\n}\n\nfunction Timeline({ users, user, conversation, colors }) {\n  const globalHeight = toMs(\n    conversation.results[conversation.results.length - 1].resultEndTime\n  );\n\n  return (\n    <div className=\"\" style={{ width: `${100 / Object.keys(users).length}%` }}>\n      <h3>Timeline of {users[user]}</h3>\n      <div\n        className=\"relative\"\n        style={{\n          width: \"95%\",\n          height: globalHeight\n        }}\n      >\n        {conversation &&\n          conversation.results\n            .filter((message) => message.channelTag === parseInt(user, 10))\n            .map((message) => {\n              const text = message.alternatives.map((text) => text.transcript);\n\n              if (!text.join(\"\").length) {\n                return;\n              }\n\n              const firstWordTime = message.alternatives[0].words[0].startTime;\n\n              if (!message.alternatives[0].words[0].startTime) {\n                return null;\n              }\n\n              const calculatedHeight =\n                toMs(message.resultEndTime) -\n                toMs(message.alternatives[0].words[0].startTime);\n\n              return (\n                <div\n                  className=\"pb1 flex absolute left-0 pa2\"\n                  style={{\n                    top: toMs(message.alternatives[0].words[0].startTime),\n                    minHeight: `${\n                      calculatedHeight < 30 ? 30 : calculatedHeight\n                    }px`,\n                    boxShadow: \"rgb(85 85 85 / 25%) 3px 4px 6px 1px\",\n                    borderRadius: \"0 15px 15px 15px\"\n                  }}\n                >\n                  <span className=\"code f7 black-40\">\n                    {convertToMinutes(firstWordTime)}{\" \"}\n                    <span\n                      className=\"fw4 sans-serif dark-gray\"\n                      style={{ fontSize: 18 }}\n                    >\n                      <span className={`fw6 ${colors[message.channelTag - 1]}`}>\n                        {users[message.channelTag]}:{\" \"}\n                      </span>\n                      {text.join(\" \")}\n                    </span>\n                  </span>\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n}\n\nexport default function Timelines({ users, conversation, colors }) {\n  return (\n    <div className=\"flex w-100\">\n      {Object.keys(users).map((user) => {\n        return (\n          <Timeline\n            user={user}\n            users={users}\n            conversation={conversation}\n            colors={colors}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport \"tachyons/css/tachyons.min.css\";\nimport TextOnly from \"./components/textOnly\";\nimport Timelines from \"./components/timelines\";\n\nfunction selectContents(el: any) {\n  let range = document.createRange();\n  range.selectNodeContents(el);\n  let sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n\nfunction getUsers(json) {\n  return json.results.reduce((acc, item) => {\n    return { [item.channelTag]: null, ...acc };\n  }, {});\n}\n\nconst colors = [\"dark-blue\", \"dark-red\", \"dark-green\", \"dark-orange\"];\n\nfunction App() {\n  const [lastConversation, setLastConversation] = useState(\n    window.localStorage.getItem(\"lastConversation\")\n  );\n  const lastConversationJson = lastConversation\n    ? JSON.parse(lastConversation)\n    : null;\n  const [conversation, setConversation] = useState(\n    lastConversation ? lastConversationJson : null\n  );\n  const [users, setUsers] = useState(\n    lastConversation ? getUsers(lastConversationJson) : {}\n  );\n  const [tab, setTab] = useState(\"timelines\");\n\n  const handleJson = (e) => {\n    const json = JSON.parse(e.target.value);\n    const users = getUsers(json);\n\n    setUsers(users);\n    setConversation(json);\n    window.localStorage.setItem(\"lastConversation\", JSON.stringify(json));\n  };\n\n  const handleUserName = (e) => {\n    const userTag = e.target.name;\n    const newUser = { ...users };\n    newUser[userTag] = e.target.value;\n\n    setUsers(newUser);\n  };\n\n  return (\n    <div className=\"App pa4 sans-serif mid-gray flex flex-column justify-center items-center w-100\">\n      <h2 className=\"dib mt0 f3 dark-blue mb2\">\n        👀 Google-speech-to-text Visualizer\n      </h2>\n      <div className=\"\" style={{ minWidth: 800 }}>\n        {!conversation ? (\n          <div className=\"w-100\">\n            <div className=\"pt3\">\n              ⬇️ &nbsp; Paste the content from a json transcipt bellow to get a\n              version easily readable and reusable.\n              <div className=\"pv3 fw2\">\n                🕵️ This code runs in your browser and do not share your\n                transcript to anyone.\n              </div>\n            </div>\n            <textarea\n              type=\"textarea\"\n              name=\"textValue\"\n              value={lastConversation}\n              onChange={handleJson}\n              className=\"dib w-100 b--dark-blue br2\"\n              style={{ minHeight: 600, whiteSpace: \"pre-wrap\" }}\n            />\n          </div>\n        ) : null}\n\n        <div className=\"ml4 w-100\">\n          {conversation && conversation.results.length > 0 ? (\n            <div className=\"flex mt4 justify-between\">\n              <div className=\"flex\">\n                {Object.keys(users).map((user) => {\n                  return (\n                    <div>\n                      <label>👤 n°{user}</label>\n                      <input\n                        type=\"text\"\n                        name={user}\n                        onChange={handleUserName}\n                        className={`mh2 pa2 br2 b--${colors[user - 1]}`}\n                        placeholder=\"Name\"\n                        style={{ width: 110 }}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"flex\">\n                <button\n                  onClick={() => {\n                    window.localStorage.removeItem(\"lastConversation\", null);\n                    setLastConversation(null);\n                    setConversation(null);\n                  }}\n                  className=\"bg-white b-blue blue white br2 ba pa2 f5 ph3 fw5 mr3\"\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={() => {\n                    selectContents(document.getElementById(\"transformed-text\"));\n                  }}\n                  className=\"bg-dark-blue white br2 ba pa2 f5 ph3 fw5\"\n                >\n                  Select all the text\n                </button>\n              </div>\n            </div>\n          ) : null}\n\n          {conversation ? (\n            <div\n              id=\"transformed-text\"\n              className={`mt3 w-100`}\n              style={{ minWidth: 800, maxWidth: 800 }}\n            >\n              <div\n                className=\"flex w-100 bb mb3\"\n                style={{ borderBottomColor: \"lightgray\" }}\n              >\n                <div\n                  href=\"#\"\n                  className={`link blue pa2 pointer ${\n                    tab === \"timelines\" ? \"fw7\" : \"\"\n                  }`}\n                  onClick={() => setTab(\"timelines\")}\n                >\n                  Timelines\n                </div>\n                <div\n                  href=\"#\"\n                  className={`link blue pa2 pointer ${\n                    tab === \"textOnly\" ? \"fw7\" : \"\"\n                  }`}\n                  onClick={() => setTab(\"textOnly\")}\n                >\n                  Text only\n                </div>\n              </div>\n\n              {tab === \"textOnly\" ? (\n                <TextOnly\n                  conversation={conversation}\n                  colors={colors}\n                  users={users}\n                />\n              ) : null}\n              {tab === \"timelines\" ? (\n                <Timelines\n                  conversation={conversation}\n                  colors={colors}\n                  users={users}\n                />\n              ) : null}\n            </div>\n          ) : null}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}