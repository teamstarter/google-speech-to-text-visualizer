{"version":3,"sources":["convertToMinutes.js","components/textOnly.js","components/timelines.js","App.js","reportWebVitals.js","index.js"],"names":["convertToMinutes","timeInString","sec","parseInt","hours","Math","floor","minutes","seconds","TextOnly","conversation","colors","users","className","results","map","message","text","alternatives","transcript","join","length","firstWordTime","words","startTime","channelTag","toMs","time","includes","replace","Timeline","user","globalHeight","resultEndTime","style","width","Object","keys","height","filter","calculatedHeight","top","minHeight","boxShadow","borderRadius","fontSize","Timelines","getUsers","json","reduce","acc","item","App","useState","window","localStorage","getItem","lastConversation","setLastConversation","lastConversationJson","JSON","parse","setConversation","setUsers","tab","setTab","handleUserName","e","userTag","target","name","newUser","value","minWidth","type","onChange","setItem","stringify","whiteSpace","placeholder","onClick","removeItem","el","range","document","createRange","selectNodeContents","sel","getSelection","removeAllRanges","addRange","selectContents","getElementById","id","maxWidth","borderBottomColor","href","bottom","right","viewBox","fill","xmlns","d","left","opacity","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.fcdedc97.chunk.js","sourcesContent":["/**\n * String format : \"1046.800\"\n */\nexport default function convertToMinutes(timeInString) {\n  const sec = parseInt(timeInString, 10); // convert value to number if it's string\n  let hours = Math.floor(sec / 3600); // get hours\n  let minutes = Math.floor((sec - hours * 3600) / 60); // get minutes\n  let seconds = sec - hours * 3600 - minutes * 60; //  get seconds\n  // add 0 if value < 10; Example: 2 => 02\n  if (hours < 10) {\n    hours = \"0\" + hours;\n  }\n  if (minutes < 10) {\n    minutes = \"0\" + minutes;\n  }\n  if (seconds < 10) {\n    seconds = \"0\" + seconds;\n  }\n  if (parseInt(hours) === 0) {\n    return minutes + \":\" + seconds; // Return is HH : MM : SS\n  }\n  return hours + \":\" + minutes + \":\" + seconds; // Return is HH : MM : SS\n}\n","import React from \"react\";\nimport convertToMinutes from \"../convertToMinutes\";\n\nexport default function TextOnly({ conversation, colors, users }) {\n  return (\n    <div className=\"w-100\">\n      {conversation &&\n        conversation.results.map((message) => {\n          const text = message.alternatives.map((text) => text.transcript);\n\n          if (!text.join(\"\").length) {\n            return null;\n          }\n\n          const firstWordTime = message.alternatives[0].words[0].startTime;\n\n          return (\n            <div className=\"pb1 flex\">\n              <span className=\"code f7 black-40\">\n                {convertToMinutes(firstWordTime)}{\" \"}\n                <span className=\"f5 fw4 sans-serif dark-gray\">\n                  <span className={`fw6 ${colors[message.channelTag - 1]}`}>\n                    {users[message.channelTag]}:{\" \"}\n                  </span>\n                  {text.join(\" \")}\n                </span>\n              </span>\n            </div>\n          );\n        })}\n    </div>\n  );\n}\n","import React from \"react\";\nimport convertToMinutes from \"../convertToMinutes\";\n\nconst timeDilatation = 100;\n\nfunction toMs(time) {\n  if (!time.includes(\".\")) {\n    return (parseInt(time.replace(\"s\", \"\"), 10) * 1000) / timeDilatation;\n  }\n  return parseInt(time.replace(\".\", \"\").replace(\"s\", \"\"), 10) / timeDilatation;\n}\n\nfunction Timeline({ users, user, conversation, colors }) {\n  const globalHeight = toMs(\n    conversation.results[conversation.results.length - 1].resultEndTime\n  );\n\n  return (\n    <div className=\"\" style={{ width: `${100 / Object.keys(users).length}%` }}>\n      <h3>Timeline of {users[user]}</h3>\n      <div\n        className=\"relative\"\n        style={{\n          width: \"95%\",\n          height: globalHeight\n        }}\n      >\n        {conversation &&\n          conversation.results\n            .filter((message) => message.channelTag === parseInt(user, 10))\n            .map((message) => {\n              const text = message.alternatives.map((text) => text.transcript);\n\n              if (!text.join(\"\").length) {\n                return null;\n              }\n\n              const firstWordTime = message.alternatives[0].words[0].startTime;\n\n              if (!message.alternatives[0].words[0].startTime) {\n                return null;\n              }\n\n              const calculatedHeight =\n                toMs(message.resultEndTime) -\n                toMs(message.alternatives[0].words[0].startTime);\n\n              return (\n                <div\n                  className=\"pb1 flex absolute left-0 pa2 showOnHover\"\n                  style={{\n                    top: toMs(message.alternatives[0].words[0].startTime),\n                    minHeight: `${\n                      calculatedHeight < 30 ? 30 : calculatedHeight\n                    }px`,\n                    boxShadow: \"rgb(85 85 85 / 25%) 3px 4px 6px 1px\",\n                    borderRadius: \"0 15px 15px 15px\"\n                  }}\n                >\n                  <span className=\"code f7 black-40\">\n                    {convertToMinutes(firstWordTime)}{\" \"}\n                    <span\n                      className=\"fw4 sans-serif dark-gray\"\n                      style={{ fontSize: 18 }}\n                    >\n                      <span className={`fw6 ${colors[message.channelTag - 1]}`}>\n                        {users[message.channelTag]}:{\" \"}\n                      </span>\n                      {text.join(\" \")}\n                    </span>\n                  </span>\n                </div>\n              );\n            })}\n      </div>\n    </div>\n  );\n}\n\nexport default function Timelines({ users, conversation, colors }) {\n  return (\n    <div className=\"flex w-100\">\n      {Object.keys(users).map((user) => {\n        return (\n          <Timeline\n            user={user}\n            users={users}\n            conversation={conversation}\n            colors={colors}\n          />\n        );\n      })}\n    </div>\n  );\n}\n","import { useState } from \"react\";\nimport \"tachyons/css/tachyons.min.css\";\nimport TextOnly from \"./components/textOnly\";\nimport Timelines from \"./components/timelines\";\n\nfunction selectContents(el: any) {\n  let range = document.createRange();\n  range.selectNodeContents(el);\n  let sel = window.getSelection();\n  sel.removeAllRanges();\n  sel.addRange(range);\n}\n\nfunction getUsers(json) {\n  return json.results.reduce((acc, item) => {\n    return { [item.channelTag]: null, ...acc };\n  }, {});\n}\n\nconst colors = [\"dark-blue\", \"dark-red\", \"dark-green\", \"dark-orange\"];\n\nfunction App() {\n  const [lastConversation, setLastConversation] = useState(\n    window.localStorage.getItem(\"lastConversation\")\n  );\n  const lastConversationJson = lastConversation\n    ? JSON.parse(lastConversation)\n    : null;\n  const [conversation, setConversation] = useState(\n    lastConversation ? lastConversationJson : null\n  );\n  const [users, setUsers] = useState(\n    lastConversation ? getUsers(lastConversationJson) : {}\n  );\n  const [tab, setTab] = useState(\"timelines\");\n\n  const handleJson = (e) => {\n    const json = JSON.parse(e.target.value);\n    const users = getUsers(json);\n\n    setUsers(users);\n    setConversation(json);\n    window.localStorage.setItem(\"lastConversation\", JSON.stringify(json));\n  };\n\n  const handleUserName = (e) => {\n    const userTag = e.target.name;\n    const newUser = { ...users };\n    newUser[userTag] = e.target.value;\n\n    setUsers(newUser);\n  };\n\n  return (\n    <div className=\"App pa4 sans-serif mid-gray flex flex-column justify-center items-center w-100\">\n      <h2 className=\"dib mt0 f3 dark-blue mb2\">\n        👀 Google-speech-to-text Visualizer\n      </h2>\n      <div className=\"\" style={{ minWidth: 800 }}>\n        {!conversation ? (\n          <div className=\"w-100\">\n            <div className=\"pt3\">\n              ⬇️ &nbsp; Paste the content from a json transcipt bellow to get a\n              version easily readable and reusable.\n              <div className=\"pv3 fw2\">\n                🕵️ This code runs in your browser and do not share your\n                transcript to anyone.\n              </div>\n            </div>\n            <textarea\n              type=\"textarea\"\n              name=\"textValue\"\n              value={lastConversation}\n              onChange={handleJson}\n              className=\"relative dib w-100 b--dark-blue br2 bg-white z-1\"\n              style={{ minHeight: 600, whiteSpace: \"pre-wrap\" }}\n            />\n          </div>\n        ) : null}\n\n        <div className=\"ml4 w-100\">\n          {conversation && conversation.results.length > 0 ? (\n            <div className=\"flex mt4 justify-between\">\n              <div className=\"flex\">\n                {Object.keys(users).map((user) => {\n                  return (\n                    <div>\n                      <label>👤 n°{user}</label>\n                      <input\n                        type=\"text\"\n                        name={user}\n                        onChange={handleUserName}\n                        className={`mh2 pa2 br2 b--${colors[user - 1]}`}\n                        placeholder=\"Name\"\n                        style={{ width: 110 }}\n                      />\n                    </div>\n                  );\n                })}\n              </div>\n              <div className=\"flex\">\n                <button\n                  onClick={() => {\n                    window.localStorage.removeItem(\"lastConversation\", null);\n                    setLastConversation(null);\n                    setConversation(null);\n                  }}\n                  className=\"bg-white b-blue blue white br2 ba pa2 f5 ph3 fw5 mr3\"\n                >\n                  Reset\n                </button>\n                <button\n                  onClick={() => {\n                    selectContents(document.getElementById(\"transformed-text\"));\n                  }}\n                  className=\"bg-dark-blue white br2 ba pa2 f5 ph3 fw5\"\n                >\n                  Select all the text\n                </button>\n              </div>\n            </div>\n          ) : null}\n\n          {conversation ? (\n            <div\n              id=\"transformed-text\"\n              className={`relative mt3 w-100 bg-white z-1 pa3`}\n              style={{ minWidth: 800, maxWidth: 800 }}\n            >\n              <div\n                className=\"flex w-100 bb mb3\"\n                style={{ borderBottomColor: \"lightgray\" }}\n              >\n                <div\n                  href=\"#\"\n                  className={`link blue pa2 pointer ${\n                    tab === \"timelines\" ? \"fw7\" : \"\"\n                  }`}\n                  onClick={() => setTab(\"timelines\")}\n                >\n                  Timelines\n                </div>\n                <div\n                  href=\"#\"\n                  className={`link blue pa2 pointer ${\n                    tab === \"textOnly\" ? \"fw7\" : \"\"\n                  }`}\n                  onClick={() => setTab(\"textOnly\")}\n                >\n                  Text only\n                </div>\n              </div>\n\n              {tab === \"textOnly\" ? (\n                <TextOnly\n                  conversation={conversation}\n                  colors={colors}\n                  users={users}\n                />\n              ) : null}\n              {tab === \"timelines\" ? (\n                <Timelines\n                  conversation={conversation}\n                  colors={colors}\n                  users={users}\n                />\n              ) : null}\n            </div>\n          ) : null}\n        </div>\n      </div>\n      <div\n        className=\"fixed o-10 z-0 pen\"\n        style={{ bottom: -50, right: -50, width: 400 }}\n      >\n        <svg\n          className=\"w-100\"\n          viewBox=\"0 0 159 196\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M47.2671 152.631C49.6664 150.014 51.2527 146.754 51.8325 143.249C52.4123 139.744 51.9605 136.146 50.5323 132.894C49.1041 129.642 46.7612 126.877 43.7895 124.935C40.8178 122.993 37.3457 121.959 33.7969 121.959C30.2481 121.959 26.776 122.993 23.8043 124.935C20.8325 126.877 18.4896 129.642 17.0614 132.894C15.6332 136.146 15.1815 139.744 15.7613 143.249C16.3411 146.754 17.9274 150.014 20.3266 152.631C16.5322 152.944 12.9933 154.672 10.4099 157.471C7.82642 160.271 6.38654 163.939 6.375 167.75V173.85C6.375 174.659 6.69601 175.435 7.26741 176.007C7.83881 176.579 8.61379 176.9 9.42188 176.9C10.23 176.9 11.0049 176.579 11.5763 176.007C12.1477 175.435 12.4688 174.659 12.4688 173.85V167.75C12.4688 165.323 13.4318 162.996 15.146 161.28C16.8602 159.564 19.1851 158.6 21.6094 158.6H45.9844C48.4086 158.6 50.7336 159.564 52.4478 161.28C54.162 162.996 55.125 165.323 55.125 167.75V189.1H12.4688V186.05C12.4688 185.241 12.1477 184.465 11.5763 183.893C11.0049 183.321 10.23 183 9.42188 183C8.61379 183 7.83881 183.321 7.26741 183.893C6.69601 184.465 6.375 185.241 6.375 186.05V192.15C6.375 192.959 6.69601 193.735 7.26741 194.307C7.83881 194.879 8.61379 195.2 9.42188 195.2H58.1719C58.98 195.2 59.7549 194.879 60.3263 194.307C60.8977 193.735 61.2188 192.959 61.2188 192.15V167.75C61.2072 163.939 59.7673 160.271 57.1839 157.471C54.6004 154.672 51.0616 152.944 47.2671 152.631ZM33.7969 128.1C36.2073 128.1 38.5637 128.816 40.5679 130.156C42.5721 131.497 44.1342 133.402 45.0567 135.631C45.9791 137.861 46.2205 140.314 45.7502 142.68C45.2799 145.047 44.1192 147.22 42.4147 148.927C40.7103 150.633 38.5387 151.795 36.1745 152.266C33.8104 152.736 31.3599 152.495 29.1329 151.571C26.9059 150.648 25.0025 149.084 23.6633 147.078C22.3242 145.072 21.6094 142.713 21.6094 140.3C21.6094 137.064 22.8934 133.961 25.179 131.673C27.4646 129.385 30.5645 128.1 33.7969 128.1V128.1Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M138.673 152.631C141.073 150.014 142.659 146.754 143.239 143.249C143.819 139.744 143.367 136.146 141.939 132.894C140.51 129.642 138.167 126.877 135.196 124.935C132.224 122.993 128.752 121.959 125.203 121.959C121.654 121.959 118.182 122.993 115.211 124.935C112.239 126.877 109.896 129.642 108.468 132.894C107.039 136.146 106.588 139.744 107.168 143.249C107.747 146.754 109.334 150.014 111.733 152.631C107.938 152.944 104.4 154.672 101.816 157.471C99.2327 160.271 97.7928 163.939 97.7812 167.75V192.15C97.7812 192.959 98.1023 193.735 98.6737 194.307C99.2451 194.879 100.02 195.2 100.828 195.2H131.297C132.105 195.2 132.88 194.879 133.451 194.307C134.023 193.735 134.344 192.959 134.344 192.15C134.344 191.341 134.023 190.565 133.451 189.993C132.88 189.421 132.105 189.1 131.297 189.1H103.875V167.75C103.875 165.323 104.838 162.996 106.552 161.28C108.266 159.564 110.591 158.6 113.016 158.6H137.391C139.815 158.6 142.14 159.564 143.854 161.28C145.568 162.996 146.531 165.323 146.531 167.75V189.1H143.484C142.676 189.1 141.901 189.421 141.33 189.993C140.759 190.565 140.438 191.341 140.438 192.15C140.438 192.959 140.759 193.735 141.33 194.307C141.901 194.879 142.676 195.2 143.484 195.2H149.578C150.386 195.2 151.161 194.879 151.733 194.307C152.304 193.735 152.625 192.959 152.625 192.15V167.75C152.613 163.939 151.174 160.271 148.59 157.471C146.007 154.672 142.468 152.944 138.673 152.631ZM125.203 128.1C127.614 128.1 129.97 128.816 131.974 130.156C133.978 131.497 135.54 133.402 136.463 135.631C137.385 137.861 137.627 140.314 137.156 142.68C136.686 145.047 135.525 147.22 133.821 148.927C132.117 150.633 129.945 151.795 127.581 152.266C125.217 152.736 122.766 152.495 120.539 151.571C118.312 150.648 116.409 149.084 115.07 147.078C113.73 145.072 113.016 142.713 113.016 140.3C113.016 137.064 114.3 133.961 116.585 131.673C118.871 129.385 121.971 128.1 125.203 128.1V128.1Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M143.484 0H15.5156C11.4767 0.00484297 7.60459 1.61309 4.74864 4.47197C1.89269 7.33085 0.286088 11.2069 0.28125 15.25V88.45C0.286088 92.4931 1.89269 96.3691 4.74864 99.228C7.60459 102.087 11.4767 103.695 15.5156 103.7H30.75V112.85C30.7499 113.402 30.8996 113.944 31.183 114.418C31.4665 114.891 31.8731 115.279 32.3595 115.54C32.8458 115.8 33.3937 115.924 33.9447 115.897C34.4957 115.87 35.029 115.694 35.4879 115.388L52.9922 103.7H82.5469C83.355 103.7 84.1299 103.379 84.7013 102.807C85.2727 102.235 85.5938 101.459 85.5938 100.65C85.5938 99.8411 85.2727 99.0653 84.7013 98.4933C84.1299 97.9213 83.355 97.6 82.5469 97.6H52.0781C51.4764 97.601 50.8883 97.7792 50.3871 98.1124L36.8438 107.15V100.65C36.8438 99.8411 36.5227 99.0653 35.9513 98.4933C35.3799 97.9213 34.605 97.6 33.7969 97.6H15.5156C13.0914 97.6 10.7664 96.636 9.05223 94.92C7.33803 93.2041 6.375 90.8767 6.375 88.45V15.25C6.375 12.8233 7.33803 10.4959 9.05223 8.77997C10.7664 7.06402 13.0914 6.1 15.5156 6.1H143.484C145.909 6.1 148.234 7.06402 149.948 8.77997C151.662 10.4959 152.625 12.8233 152.625 15.25V88.45C152.625 90.8767 151.662 93.2041 149.948 94.92C148.234 96.636 145.909 97.6 143.484 97.6H125.203C124.395 97.6 123.62 97.9213 123.049 98.4933C122.477 99.0653 122.156 99.8411 122.156 100.65V107.15L108.613 98.1124C108.112 97.7792 107.524 97.601 106.922 97.6H94.7344C93.9263 97.6 93.1513 97.9213 92.5799 98.4933C92.0085 99.0653 91.6875 99.8411 91.6875 100.65C91.6875 101.459 92.0085 102.235 92.5799 102.807C93.1513 103.379 93.9263 103.7 94.7344 103.7H106.008L123.521 115.388C123.98 115.692 124.512 115.866 125.062 115.891C125.612 115.917 126.158 115.793 126.643 115.532C127.128 115.272 127.533 114.885 127.816 114.413C128.099 113.941 128.249 113.401 128.25 112.85V103.7H143.484C147.523 103.695 151.395 102.087 154.251 99.228C157.107 96.3691 158.714 92.4931 158.719 88.45V15.25C158.714 11.2069 157.107 7.33085 154.251 4.47197C151.395 1.61309 147.523 0.00484297 143.484 0V0Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M116.062 45.75C116.871 45.75 117.646 45.4287 118.217 44.8567C118.788 44.2847 119.109 43.5089 119.109 42.7C119.109 41.8911 118.788 41.1153 118.217 40.5433C117.646 39.9714 116.871 39.65 116.062 39.65H61.2188C60.4107 39.65 59.6357 39.9714 59.0643 40.5433C58.4929 41.1153 58.1719 41.8911 58.1719 42.7C58.1719 43.5089 58.4929 44.2847 59.0643 44.8567C59.6357 45.4287 60.4107 45.75 61.2188 45.75H116.062Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M55.125 64.0499H103.875C104.683 64.0499 105.458 63.7286 106.029 63.1566C106.601 62.5846 106.922 61.8089 106.922 60.9999C106.922 60.191 106.601 59.4153 106.029 58.8433C105.458 58.2713 104.683 57.95 103.875 57.95H55.125C54.3169 57.95 53.5419 58.2713 52.9705 58.8433C52.3991 59.4153 52.0781 60.191 52.0781 60.9999C52.0781 61.8089 52.3991 62.5846 52.9705 63.1566C53.5419 63.7286 54.3169 64.0499 55.125 64.0499Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M49.0312 39.65H42.9375C42.1294 39.65 41.3544 39.9714 40.783 40.5433C40.2116 41.1153 39.8906 41.8911 39.8906 42.7C39.8906 43.5089 40.2116 44.2847 40.783 44.8567C41.3544 45.4287 42.1294 45.75 42.9375 45.75H49.0312C49.8393 45.75 50.6143 45.4287 51.1857 44.8567C51.7571 44.2847 52.0781 43.5089 52.0781 42.7C52.0781 41.8911 51.7571 41.1153 51.1857 40.5433C50.6143 39.9714 49.8393 39.65 49.0312 39.65Z\"\n            fill=\"black\"\n          />\n        </svg>\n      </div>\n      <div\n        className=\"fixed z-0 pen\"\n        style={{ bottom: -50, left: -50, width: 700, opacity: \"3%\" }}\n      >\n        <svg\n          className=\"w-100\"\n          viewBox=\"0 0 159 196\"\n          fill=\"none\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n        >\n          <path\n            d=\"M47.2671 152.631C49.6664 150.014 51.2527 146.754 51.8325 143.249C52.4123 139.744 51.9605 136.146 50.5323 132.894C49.1041 129.642 46.7612 126.877 43.7895 124.935C40.8178 122.993 37.3457 121.959 33.7969 121.959C30.2481 121.959 26.776 122.993 23.8043 124.935C20.8325 126.877 18.4896 129.642 17.0614 132.894C15.6332 136.146 15.1815 139.744 15.7613 143.249C16.3411 146.754 17.9274 150.014 20.3266 152.631C16.5322 152.944 12.9933 154.672 10.4099 157.471C7.82642 160.271 6.38654 163.939 6.375 167.75V173.85C6.375 174.659 6.69601 175.435 7.26741 176.007C7.83881 176.579 8.61379 176.9 9.42188 176.9C10.23 176.9 11.0049 176.579 11.5763 176.007C12.1477 175.435 12.4688 174.659 12.4688 173.85V167.75C12.4688 165.323 13.4318 162.996 15.146 161.28C16.8602 159.564 19.1851 158.6 21.6094 158.6H45.9844C48.4086 158.6 50.7336 159.564 52.4478 161.28C54.162 162.996 55.125 165.323 55.125 167.75V189.1H12.4688V186.05C12.4688 185.241 12.1477 184.465 11.5763 183.893C11.0049 183.321 10.23 183 9.42188 183C8.61379 183 7.83881 183.321 7.26741 183.893C6.69601 184.465 6.375 185.241 6.375 186.05V192.15C6.375 192.959 6.69601 193.735 7.26741 194.307C7.83881 194.879 8.61379 195.2 9.42188 195.2H58.1719C58.98 195.2 59.7549 194.879 60.3263 194.307C60.8977 193.735 61.2188 192.959 61.2188 192.15V167.75C61.2072 163.939 59.7673 160.271 57.1839 157.471C54.6004 154.672 51.0616 152.944 47.2671 152.631ZM33.7969 128.1C36.2073 128.1 38.5637 128.816 40.5679 130.156C42.5721 131.497 44.1342 133.402 45.0567 135.631C45.9791 137.861 46.2205 140.314 45.7502 142.68C45.2799 145.047 44.1192 147.22 42.4147 148.927C40.7103 150.633 38.5387 151.795 36.1745 152.266C33.8104 152.736 31.3599 152.495 29.1329 151.571C26.9059 150.648 25.0025 149.084 23.6633 147.078C22.3242 145.072 21.6094 142.713 21.6094 140.3C21.6094 137.064 22.8934 133.961 25.179 131.673C27.4646 129.385 30.5645 128.1 33.7969 128.1V128.1Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M138.673 152.631C141.073 150.014 142.659 146.754 143.239 143.249C143.819 139.744 143.367 136.146 141.939 132.894C140.51 129.642 138.167 126.877 135.196 124.935C132.224 122.993 128.752 121.959 125.203 121.959C121.654 121.959 118.182 122.993 115.211 124.935C112.239 126.877 109.896 129.642 108.468 132.894C107.039 136.146 106.588 139.744 107.168 143.249C107.747 146.754 109.334 150.014 111.733 152.631C107.938 152.944 104.4 154.672 101.816 157.471C99.2327 160.271 97.7928 163.939 97.7812 167.75V192.15C97.7812 192.959 98.1023 193.735 98.6737 194.307C99.2451 194.879 100.02 195.2 100.828 195.2H131.297C132.105 195.2 132.88 194.879 133.451 194.307C134.023 193.735 134.344 192.959 134.344 192.15C134.344 191.341 134.023 190.565 133.451 189.993C132.88 189.421 132.105 189.1 131.297 189.1H103.875V167.75C103.875 165.323 104.838 162.996 106.552 161.28C108.266 159.564 110.591 158.6 113.016 158.6H137.391C139.815 158.6 142.14 159.564 143.854 161.28C145.568 162.996 146.531 165.323 146.531 167.75V189.1H143.484C142.676 189.1 141.901 189.421 141.33 189.993C140.759 190.565 140.438 191.341 140.438 192.15C140.438 192.959 140.759 193.735 141.33 194.307C141.901 194.879 142.676 195.2 143.484 195.2H149.578C150.386 195.2 151.161 194.879 151.733 194.307C152.304 193.735 152.625 192.959 152.625 192.15V167.75C152.613 163.939 151.174 160.271 148.59 157.471C146.007 154.672 142.468 152.944 138.673 152.631ZM125.203 128.1C127.614 128.1 129.97 128.816 131.974 130.156C133.978 131.497 135.54 133.402 136.463 135.631C137.385 137.861 137.627 140.314 137.156 142.68C136.686 145.047 135.525 147.22 133.821 148.927C132.117 150.633 129.945 151.795 127.581 152.266C125.217 152.736 122.766 152.495 120.539 151.571C118.312 150.648 116.409 149.084 115.07 147.078C113.73 145.072 113.016 142.713 113.016 140.3C113.016 137.064 114.3 133.961 116.585 131.673C118.871 129.385 121.971 128.1 125.203 128.1V128.1Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M143.484 0H15.5156C11.4767 0.00484297 7.60459 1.61309 4.74864 4.47197C1.89269 7.33085 0.286088 11.2069 0.28125 15.25V88.45C0.286088 92.4931 1.89269 96.3691 4.74864 99.228C7.60459 102.087 11.4767 103.695 15.5156 103.7H30.75V112.85C30.7499 113.402 30.8996 113.944 31.183 114.418C31.4665 114.891 31.8731 115.279 32.3595 115.54C32.8458 115.8 33.3937 115.924 33.9447 115.897C34.4957 115.87 35.029 115.694 35.4879 115.388L52.9922 103.7H82.5469C83.355 103.7 84.1299 103.379 84.7013 102.807C85.2727 102.235 85.5938 101.459 85.5938 100.65C85.5938 99.8411 85.2727 99.0653 84.7013 98.4933C84.1299 97.9213 83.355 97.6 82.5469 97.6H52.0781C51.4764 97.601 50.8883 97.7792 50.3871 98.1124L36.8438 107.15V100.65C36.8438 99.8411 36.5227 99.0653 35.9513 98.4933C35.3799 97.9213 34.605 97.6 33.7969 97.6H15.5156C13.0914 97.6 10.7664 96.636 9.05223 94.92C7.33803 93.2041 6.375 90.8767 6.375 88.45V15.25C6.375 12.8233 7.33803 10.4959 9.05223 8.77997C10.7664 7.06402 13.0914 6.1 15.5156 6.1H143.484C145.909 6.1 148.234 7.06402 149.948 8.77997C151.662 10.4959 152.625 12.8233 152.625 15.25V88.45C152.625 90.8767 151.662 93.2041 149.948 94.92C148.234 96.636 145.909 97.6 143.484 97.6H125.203C124.395 97.6 123.62 97.9213 123.049 98.4933C122.477 99.0653 122.156 99.8411 122.156 100.65V107.15L108.613 98.1124C108.112 97.7792 107.524 97.601 106.922 97.6H94.7344C93.9263 97.6 93.1513 97.9213 92.5799 98.4933C92.0085 99.0653 91.6875 99.8411 91.6875 100.65C91.6875 101.459 92.0085 102.235 92.5799 102.807C93.1513 103.379 93.9263 103.7 94.7344 103.7H106.008L123.521 115.388C123.98 115.692 124.512 115.866 125.062 115.891C125.612 115.917 126.158 115.793 126.643 115.532C127.128 115.272 127.533 114.885 127.816 114.413C128.099 113.941 128.249 113.401 128.25 112.85V103.7H143.484C147.523 103.695 151.395 102.087 154.251 99.228C157.107 96.3691 158.714 92.4931 158.719 88.45V15.25C158.714 11.2069 157.107 7.33085 154.251 4.47197C151.395 1.61309 147.523 0.00484297 143.484 0V0Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M116.062 45.75C116.871 45.75 117.646 45.4287 118.217 44.8567C118.788 44.2847 119.109 43.5089 119.109 42.7C119.109 41.8911 118.788 41.1153 118.217 40.5433C117.646 39.9714 116.871 39.65 116.062 39.65H61.2188C60.4107 39.65 59.6357 39.9714 59.0643 40.5433C58.4929 41.1153 58.1719 41.8911 58.1719 42.7C58.1719 43.5089 58.4929 44.2847 59.0643 44.8567C59.6357 45.4287 60.4107 45.75 61.2188 45.75H116.062Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M55.125 64.0499H103.875C104.683 64.0499 105.458 63.7286 106.029 63.1566C106.601 62.5846 106.922 61.8089 106.922 60.9999C106.922 60.191 106.601 59.4153 106.029 58.8433C105.458 58.2713 104.683 57.95 103.875 57.95H55.125C54.3169 57.95 53.5419 58.2713 52.9705 58.8433C52.3991 59.4153 52.0781 60.191 52.0781 60.9999C52.0781 61.8089 52.3991 62.5846 52.9705 63.1566C53.5419 63.7286 54.3169 64.0499 55.125 64.0499Z\"\n            fill=\"black\"\n          />\n          <path\n            d=\"M49.0312 39.65H42.9375C42.1294 39.65 41.3544 39.9714 40.783 40.5433C40.2116 41.1153 39.8906 41.8911 39.8906 42.7C39.8906 43.5089 40.2116 44.2847 40.783 44.8567C41.3544 45.4287 42.1294 45.75 42.9375 45.75H49.0312C49.8393 45.75 50.6143 45.4287 51.1857 44.8567C51.7571 44.2847 52.0781 43.5089 52.0781 42.7C52.0781 41.8911 51.7571 41.1153 51.1857 40.5433C50.6143 39.9714 49.8393 39.65 49.0312 39.65Z\"\n            fill=\"black\"\n          />\n        </svg>\n        <style>{`.showOnHover:hover {\n  z-index: 2;\n  background-color: white;\n}\n.pen {\n  pointer-events: none;\n}\n`}</style>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}